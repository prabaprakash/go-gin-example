{"version":3,"sources":["api.js","Feedback.js","Feedbacks.js","serviceWorker.js","index.js"],"names":["callFetch","endpoint","params","requestOptions","_","isEmpty","fetch","then","response","get","json","Promise","reject","error","message","callPost","body","credentials","method","headers","Accept","JSON","stringify","Feedback","props","state","form","handleChange","bind","validateForm","e","this","target","name","value","setState","key","toString","api","res","console","log","undefined","Container","Form","Group","controlId","Label","Control","type","placeholder","onChange","count","rating","x","size","color2","feedback","as","rows","Button","onClick","React","Component","Feedbacks","feedbacks","loadFeedbacks","map","_id","Table","striped","bordered","hover","renderTableRows","Boolean","window","location","hostname","match","Routers","path","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.284192dc.chunk.js","sourcesContent":["import _ from 'lodash';\r\n\r\nexport function callFetch(endpoint, params = {}) {\r\n    const requestOptions = {};\r\n    if (!_.isEmpty(params)) {\r\n      requestOptions['headers'] = params;\r\n    }\r\n    return fetch(endpoint, requestOptions)\r\n      .then(\r\n        response =>\r\n          _.get(response, 'ok') ? response.json() : Promise.reject(response)\r\n      )\r\n      .then(\r\n        response => ({ response }),\r\n        error => ({ error: error.message || 'Something bad happened' })\r\n      );\r\n  }\r\n  \r\n  export function callPost(endpoint, body = {}) {\r\n    const requestOptions = {\r\n      credentials: 'same-origin',\r\n      method: 'POST',\r\n      headers: {\r\n        Accept: 'application/json',\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(body),\r\n    };\r\n    return fetch(endpoint, requestOptions).then(\r\n      response => ({ response }),\r\n      error => ({ error: error.message || 'Something bad happened' })\r\n    );\r\n  }","import React from 'react';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as api from \"./api\";\nimport ReactStars from 'react-stars'\nimport _ from 'lodash';\n\nimport { Button, Row, Container, Form } from 'react-bootstrap';\nexport default class Feedback extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      form: {\n        \"name\": \"\",\n        \"rating\": \"\",\n        \"feedback\": \"\"\n      }\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.validateForm = this.validateForm.bind(this);\n  }\n  handleChange(e) {\n    let form = this.state.form;\n    form[e.target.name] = e.target.value;\n    this.setState({ form: form });\n  }\n\n  async validateForm(state) {\n    for (var key in state) {\n      if (_.isEmpty(state[key].toString()))\n        return;\n    };\n    const res = await api.callPost(\"/db/feedbacks\", this.state.form);\n    console.log(res);\n    if (typeof res.response !== undefined) {\n      this.setState({\n        form: {\n          \"name\": \"\",\n          \"rating\": \"\",\n          \"feedback\": \"\"\n        }\n      });\n    }\n    return;\n  }\n  render() {\n    console.log(this.state)\n    return (<Container>\n      <Form>\n        <Form.Group controlId=\"exampleForm.ControlInput1\">\n          <Form.Label>Name</Form.Label>\n          <Form.Control value={this.state.form.name} type=\"text\" name=\"name\" placeholder=\"name\" onChange={this.handleChange}\n          />\n        </Form.Group>\n        <Form.Group controlId=\"exampleForm.ControlTextarea1\">\n          <Form.Label>Rating</Form.Label>\n          <ReactStars\n            count={5}\n            value={this.state.form.rating}\n            onChange={(x) => this.handleChange({ target: { name: \"rating\", value: x } })}\n            size={24}\n            color2={'#ffd700'} />\n        </Form.Group>\n        <Form.Group controlId=\"exampleForm.ControlTextarea1\">\n          <Form.Label>Feedback</Form.Label>\n          <Form.Control value={this.state.form.feedback} as=\"textarea\" name='feedback' rows=\"3\" onChange={this.handleChange}\n          />\n        </Form.Group>\n        <Button onClick={() => this.validateForm(this.state.form)}>\n          Submit\n      </Button>\n      </Form>\n    </Container>\n    );\n  }\n}\n\nFeedback.propTypes = {\n};","import React from 'react';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport * as api from \"./api\";\r\nimport _ from 'lodash';\r\n\r\n\r\nimport { Container, Table } from 'react-bootstrap';\r\nexport default class Feedbacks extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { feedbacks: [] };\r\n    this.loadFeedbacks = this.loadFeedbacks.bind(this);\r\n    this.loadFeedbacks();\r\n  }\r\n  async loadFeedbacks () {\r\n    const res = await api.callFetch(\"/db/feedbacks\");\r\n    this.setState({ feedbacks: res.response });\r\n  }\r\n  renderTableRows(feedbacks) {\r\n      return _.map(feedbacks, feedback=>\r\n      <tr><td>{feedback._id}</td>\r\n        <td>{feedback.name}</td>\r\n        <td>{feedback.rating}</td>\r\n        <td>{feedback.feedback}</td></tr>\r\n      )\r\n  }\r\n  render() {\r\n    return (<Container>\r\n     <Table striped bordered hover>\r\n  <thead>\r\n    <tr>\r\n      <th>_id</th>\r\n      <th>Name</th>\r\n      <th>Rating</th>\r\n      <th>Feedback</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    {this.renderTableRows(this.state.feedbacks)}\r\n  </tbody>\r\n</Table>\r\n    </Container>\r\n    );\r\n  }\r\n}\r\n\r\nFeedbacks.propTypes = {\r\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Feedback from './Feedback';\nimport Feedbacks from './Feedbacks';\nimport * as serviceWorker from './serviceWorker';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link\n} from \"react-router-dom\";\n\nexport const Routers = () => <Router>\n    <div>\n        <Switch>\n            <Route path=\"/Feedbacks\">\n                <Feedbacks />\n            </Route>\n            <Route path=\"/\">\n                <Feedback />\n            </Route>\n        </Switch>\n    </div>\n</Router>\nReactDOM.render(<Routers />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}